/*
 * File:   Postlab8.c
 * Author: Ronal
 *
 * Created on 20 de abril de 2023, 10:06 AM
 */

#pragma config FOSC = INTRC_NOCLKOUT// Oscillator Selection bits (INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O function on RA7/OSC1/CLKIN)
#pragma config WDTE = OFF       // Watchdog Timer Enable bit (WDT disabled and can be enabled by SWDTEN bit of the WDTCON register)
#pragma config PWRTE = OFF      // Power-up Timer Enable bit (PWRT disabled)
#pragma config MCLRE = OFF      // RE3/MCLR pin function select bit (RE3/MCLR pin function is digital input, MCLR internally tied to VDD)
#pragma config CP = OFF         // Code Protection bit (Program memory code protection is disabled)
#pragma config CPD = OFF        // Data Code Protection bit (Data memory code protection is disabled)
#pragma config BOREN = OFF      // Brown Out Reset Selection bits (BOR disabled)
#pragma config IESO = OFF       // Internal External Switchover bit (Internal/External Switchover mode is disabled)
#pragma config FCMEN = OFF      // Fail-Safe Clock Monitor Enabled bit (Fail-Safe Clock Monitor is disabled)
#pragma config LVP = OFF        // Low Voltage Programming Enable bit (RB3 pin has digital I/O, HV on MCLR must be used for programming)

// CONFIG2
#pragma config BOR4V = BOR40V   // Brown-out Reset Selection bit (Brown-out Reset set to 4.0V)
#pragma config WRT = OFF        // Flash Program Memory Self Write Enable bits (Write protection off)

#include <xc.h>
#include <stdio.h>
#include <stdint.h>

//Frecuencia del delay
#define _XTAL_FREQ 1000000

//Globales
int Sflag = 0;
uint8_t potenciometro;
uint8_t option;
uint8_t portbchar;
unsigned char z = '\r';

//Prototipos de funciones
void setup(void);
void listaoptions(void);
void entry(int a);

//Principal
void setup(void){
    ANSEL = 0B00000111;
    ANSELH = 0;
    
    TRISA = 0b00000001;
    TRISB = 0;
    PORTA = 0;
    PORTB = 0;
    
    //CONFIGURACION DE INTERRUPCIONES 
    INTCONbits.GIE = 1;
    INTCONbits.PEIE = 1; 
    PIR1bits.ADIF = 0; 
    PIE1bits.ADIE = 1; 
    
    //configuracion del oscilador a 1Mhz 
    OSCCONbits.IRCF = 0b0100; 
    OSCCONbits.SCS = 1; 
    
    //Configuración del ADC
    ADCON0bits.ADCS = 0b01;
    ADCON1bits.VCFG0 = 0;
    ADCON1bits.VCFG1 = 0;
    ADCON0bits.CHS = 0b0000;
    ADCON1bits.ADFM = 0;
    ADCON0bits.ADON = 1;
    __delay_us(40);
    
    //Configuración serial
    TXSTAbits.SYNC = 0;
    TXSTAbits.BRGH = 1;
    BAUDCTLbits.BRG16 = 1;
    SPBRGH = 0;
    SPBRG = 25;
    RCSTAbits.SPEN = 1;
    TXSTAbits.TXEN = 1;
    RCSTAbits.CREN = 1;
    PIE1bits.RCIE = 1;
    
}
//Función Para entradas con los valores especificados
void entry(int a){
    while(a > 0){
        a--;
        __delay_ms(40);
        TXREG = z;
    }
}
//Función de muestra de caracteres en consola
void tprint(char *string){
    while(*string != '\0'){
        while(TXIF != 1);
        TXREG= *string;
        *string++;
    }
}
//interrupciones
void __interrupt() isr(void){
    if(PIR1bits.ADIF){
        if(ADCON0bits.CHS == 0){
            potenciometro = ADRESH;
        }
        PIR1bits.ADIF = 0;
    }
    if (RCIF){
        if(Sflag == 0){
            option = RCREG;
            RCREG = 0;
        }
        else if(Sflag == 1){
            Sflag = 0;
            portbchar = RCREG;
            TXREG = portbchar;
            PORTB = portbchar;
            RCREG = 0;
            entry(1);
            listaoptions();
        }
    }
    return;
}

void main(void){
    //Ejecución de configuración
    setup();
    listaoptions();
    
    //Loop main
    while(1){
        if (ADCON0bits.GO == 0){
            ADCON0bits.GO = 1;
        }
        if(option == 0x61){
            option = 0x00;
            tprint("Valor del POT: ");
            __delay_ms(500);
            TXREG = potenciometro;
            __delay_ms(500);
            listaoptions();
        }
        else if (option == 0x62){
            Sflag = 1;
            tprint("Ingresar la letra valor en ASCII: ");
            option= 0x00;
        }
    }
    return;
}

//Menu en la terminal
void listaoptions(){
    entry(2);
    tprint("Menu_Principal");
    entry(1);
    tprint("A) Leer valor del POT");
    entry(1);
    tprint("B) Leer en valor ASCII");
    entry(2);
}
